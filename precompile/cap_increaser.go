// Code generated
// This file is a generated precompile contract with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

// There are some must-be-done changes waiting in the file. Each area requiring you to add your code is marked with CUSTOM CODE to make them easy to find and modify.
// Additionally there are other files you need to edit to activate your precompile.
// These areas are highlighted with comments "ADD YOUR PRECOMPILE HERE".
// For testing take a look at other precompile tests in core/stateful_precompile_test.go

/* General guidelines for precompile development:
1- Read the comment and set a suitable contract address in precompile/params.go. E.g:
	CapIncreaserAddress = common.HexToAddress("ASUITABLEHEXADDRESS")
2- Set gas costs here
3- It is recommended to only modify code in the highlighted areas marked with "CUSTOM CODE STARTS HERE". Modifying code outside of these areas should be done with caution and with a deep understanding of how these changes may impact the EVM.
Typically, custom codes are required in only those areas.
4- Add your upgradable config in params/precompile_config.go
5- Add your precompile upgrade in params/config.go
6- Add your solidity interface and test contract to contract-examples/contracts
7- Write solidity tests for your precompile in contract-examples/test
8- Create your genesis with your precompile enabled in tests/e2e/genesis/
9- Create e2e test for your solidity test in tests/e2e/solidity/suites.go
10- Run your e2e precompile Solidity tests with 'E2E=true ./scripts/run.sh'

*/

package precompile

import (
	"encoding/json"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/vmerrs"

	"github.com/ethereum/go-ethereum/common"
)

const (
	UpgradeCapGasCost uint64 = writeGasCostPerSlot

	// CapIncreaserRawABI contains the raw ABI of CapIncreaser contract.
	CapIncreaserRawABI = "[{\"inputs\":[],\"name\":\"upgradeCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	_ StatefulPrecompileConfig = &CapIncreaserConfig{}

	CapIncreaserABI abi.ABI // will be initialized by init function

	CapIncreaserPrecompile StatefulPrecompiledContract // will be initialized by init function
)

// CapIncreaserConfig implements the StatefulPrecompileConfig
// interface while adding in the CapIncreaser specific precompile address.
type CapIncreaserConfig struct {
	UpgradeableConfig
}

func init() {
	parsed, err := abi.JSON(strings.NewReader(CapIncreaserRawABI))
	if err != nil {
		panic(err)
	}
	CapIncreaserABI = parsed

	CapIncreaserPrecompile = createCapIncreaserPrecompile(CapIncreaserAddress)
}

// NewCapIncreaserConfig returns a config for a network upgrade at [blockTimestamp] that enables
// CapIncreaser .
func NewCapIncreaserConfig(blockTimestamp *big.Int) *CapIncreaserConfig {
	return &CapIncreaserConfig{
		UpgradeableConfig: UpgradeableConfig{BlockTimestamp: blockTimestamp},
	}
}

// NewDisableCapIncreaserConfig returns config for a network upgrade at [blockTimestamp]
// that disables CapIncreaser.
func NewDisableCapIncreaserConfig(blockTimestamp *big.Int) *CapIncreaserConfig {
	return &CapIncreaserConfig{
		UpgradeableConfig: UpgradeableConfig{
			BlockTimestamp: blockTimestamp,
			Disable:        true,
		},
	}
}

// Equal returns true if [s] is a [*CapIncreaserConfig] and it has been configured identical to [c].
func (c *CapIncreaserConfig) Equal(s StatefulPrecompileConfig) bool {
	// typecast before comparison
	other, ok := (s).(*CapIncreaserConfig)
	if !ok {
		return false
	}
	// modify this boolean accordingly with your custom CapIncreaserConfig, to check if [other] and the current [c] are equal
	// if CapIncreaserConfig contains only UpgradeableConfig  you can skip modifying it.
	equals := c.UpgradeableConfig.Equal(&other.UpgradeableConfig)
	return equals
}

// String returns a string representation of the CapIncreaserConfig.
func (c *CapIncreaserConfig) String() string {
	bytes, _ := json.Marshal(c)
	return string(bytes)
}

// Address returns the address of the CapIncreaser. Addresses reside under the precompile/params.go
// Select a non-conflicting address and set it in the params.go.
func (c *CapIncreaserConfig) Address() common.Address {
	return CapIncreaserAddress
}

// Configure configures [state] with the initial configuration.
func (c *CapIncreaserConfig) Configure(_ ChainConfig, state StateDB, _ BlockContext) {
	// This will be called in the first block where HelloWorld stateful precompile is enabled.
	// 1) If BlockTimestamp is nil, this will not be called
	// 2) If BlockTimestamp is 0, this will be called while setting up the genesis block
	// 3) If BlockTimestamp is 1000, this will be called while processing the first block
	// whose timestamp is >= 1000

	// Set the initial value under [common.BytesToHash([]byte("storageKey")] to "Hello World!"
	//res := common.LeftPadBytes([]byte("Hello World!"), common.HashLength)
	//state.SetState(CapIncreaserAddress, common.BytesToHash([]byte("storageKey")), common.BytesToHash(res))

	// TODO - Update the cap of the CRYSTAL token.
	//state.SetState("CRYSTAL_ADDRESS", 0x7, 0x000000000000000000000000000000000000000000CECB8F27F4200F3A000000)
}

// Contract returns the singleton stateful precompiled contract to be used for CapIncreaser.
func (c *CapIncreaserConfig) Contract() StatefulPrecompiledContract {
	return CapIncreaserPrecompile
}

// Verify tries to verify CapIncreaserConfig and returns an error accordingly.
func (c *CapIncreaserConfig) Verify() error {
	return nil
}

// PackUpgradeCap packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackUpgradeCap() ([]byte, error) {
	return CapIncreaserABI.Pack("upgradeCap")
}

func upgradeCap(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, UpgradeCapGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// no input provided for this function

	// Upgrade the cap of the CRYSTAL token.
	currentState := accessibleState.GetStateDB()
	CRYSTAL_ADDRESS := common.HexToAddress("0x52C84043CD9c865236f11d9Fc9F56aa003c1f922")
	currentState.SetState(CRYSTAL_ADDRESS, common.HexToHash("0x7"), common.HexToHash("0xCECB8F27F4200F3A000000"))

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createCapIncreaserPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createCapIncreaserPrecompile(precompileAddr common.Address) StatefulPrecompiledContract {
	var functions []*statefulPrecompileFunction

	methodUpgradeCap, ok := CapIncreaserABI.Methods["upgradeCap"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodUpgradeCap.ID, upgradeCap))

	// Construct the contract with no fallback function.
	contract := newStatefulPrecompileWithFunctionSelectors(nil, functions)
	return contract
}
