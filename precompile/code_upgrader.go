// Code generated
// This file is a generated precompile contract with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

// There are some must-be-done changes waiting in the file. Each area requiring you to add your code is marked with CUSTOM CODE to make them easy to find and modify.
// Additionally there are other files you need to edit to activate your precompile.
// These areas are highlighted with comments "ADD YOUR PRECOMPILE HERE".
// For testing take a look at other precompile tests in core/stateful_precompile_test.go

/* General guidelines for precompile development:
1- Read the comment and set a suitable contract address in precompile/params.go. E.g:
	CodeUpgraderAddress = common.HexToAddress("ASUITABLEHEXADDRESS")
2- Set gas costs here
3- It is recommended to only modify code in the highlighted areas marked with "CUSTOM CODE STARTS HERE". Modifying code outside of these areas should be done with caution and with a deep understanding of how these changes may impact the EVM.
Typically, custom codes are required in only those areas.
4- Add your upgradable config in params/precompile_config.go
5- Add your precompile upgrade in params/config.go
6- Add your solidity interface and test contract to contract-examples/contracts
7- Write solidity tests for your precompile in contract-examples/test
8- Create your genesis with your precompile enabled in tests/e2e/genesis/
9- Create e2e test for your solidity test in tests/e2e/solidity/suites.go
10- Run your e2e precompile Solidity tests with 'E2E=true ./scripts/run.sh'

*/

package precompile

import (
	"encoding/json"
	"github.com/ethereum/go-ethereum/log"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	_ StatefulPrecompileConfig = &CodeUpgraderConfig{}

	CodeUpgraderPrecompile StatefulPrecompiledContract // will be initialized by init function
)

type CodeUpgraderConfigStruct struct {
	// The source contract address.
	Source common.Address `json:"source,omitempty"`

	// The address of the contract that will be upgraded.
	Target common.Address `json:"target,omitempty"`
}

// CodeUpgraderConfig implements the StatefulPrecompileConfig
// interface while adding in the CodeUpgrader specific precompile address.
type CodeUpgraderConfig struct {
	UpgradeableConfig
	InitialCodeUpgraderConfig *CodeUpgraderConfigStruct `json:"initialCodeUpgraderConfig,omitempty"`
}

func init() {
	// Nothing to do here
}

// NewCodeUpgraderConfig returns a config for a network upgrade at [blockTimestamp] that enables
// CodeUpgrader .
func NewCodeUpgraderConfig(blockTimestamp *big.Int) *CodeUpgraderConfig {
	return &CodeUpgraderConfig{
		UpgradeableConfig: UpgradeableConfig{BlockTimestamp: blockTimestamp},
	}
}

// NewDisableCodeUpgraderConfig returns config for a network upgrade at [blockTimestamp]
// that disables CodeUpgrader.
func NewDisableCodeUpgraderConfig(blockTimestamp *big.Int) *CodeUpgraderConfig {
	return &CodeUpgraderConfig{
		UpgradeableConfig: UpgradeableConfig{
			BlockTimestamp: blockTimestamp,
			Disable:        true,
		},
	}
}

// Equal returns true if [s] is a [*CodeUpgraderConfig] and it has been configured identical to [c].
func (c *CodeUpgraderConfig) Equal(s StatefulPrecompileConfig) bool {
	// typecast before comparison
	other, ok := (s).(*CodeUpgraderConfig)
	if !ok {
		return false
	}
	// modify this boolean accordingly with your custom CodeUpgraderConfig, to check if [other] and the current [c] are equal
	// if CodeUpgraderConfig contains only UpgradeableConfig  you can skip modifying it.
	equals := c.UpgradeableConfig.Equal(&other.UpgradeableConfig)
	return equals
}

// String returns a string representation of the CodeUpgraderConfig.
func (c *CodeUpgraderConfig) String() string {
	bytes, _ := json.Marshal(c)
	return string(bytes)
}

// Address returns the address of the CodeUpgrader. Addresses reside under the precompile/params.go
// Select a non-conflicting address and set it in the params.go.
func (c *CodeUpgraderConfig) Address() common.Address {
	return CodeUpgraderAddress
}

// Configure configures [state] with the initial configuration.
func (c *CodeUpgraderConfig) Configure(_ ChainConfig, state StateDB, _ BlockContext) {
	// This will be called in the first block where HelloWorld stateful precompile is enabled.
	// 1) If BlockTimestamp is nil, this will not be called
	// 2) If BlockTimestamp is 0, this will be called while setting up the genesis block
	// 3) If BlockTimestamp is 1000, this will be called while processing the first block
	// whose timestamp is >= 1000

	// Set the code.
	log.Info("Running CodeUpgrader Config", "config", c)
	if c.InitialCodeUpgraderConfig != nil {
		// Load the account of the source contract.
		log.Info("Setting the code", "source", c.InitialCodeUpgraderConfig.Source, "target", c.InitialCodeUpgraderConfig.Target, "code", state.GetCode(c.InitialCodeUpgraderConfig.Source))
		state.SetCode(c.InitialCodeUpgraderConfig.Target, state.GetCode(c.InitialCodeUpgraderConfig.Source))
	} else {
		log.Error("Code Upgrader Config is not set")
	}
}

// Contract returns the singleton stateful precompiled contract to be used for CodeUpgrader.
func (c *CodeUpgraderConfig) Contract() StatefulPrecompiledContract {
	return CodeUpgraderPrecompile
}

// Verify tries to verify CodeUpgraderConfig and returns an error accordingly.
func (c *CodeUpgraderConfig) Verify() error {
	return nil
}

// createCodeUpgraderPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createCodeUpgraderPrecompile() StatefulPrecompiledContract {
	var functions []*statefulPrecompileFunction

	// Construct the contract with no fallback function.
	contract := newStatefulPrecompileWithFunctionSelectors(nil, functions)
	return contract
}
